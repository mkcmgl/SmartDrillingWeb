/**
 * @module geotoolkit3d/data/loader/vtk/VTKFactory
 */
import type { Color, Material, Object3D, Vector3 } from 'three';
import { Line, Mesh } from 'three';
import type { ColorProvider } from '@int/geotoolkit/util/ColorProvider';
import { PointCloud } from '@int/geotoolkit3d/scene/pointset/PointCloud';
/**
 * This class can parse vtk files and return a comprehensive json object.<br>
 * <br>
 * This object can be used to generate Geometries and Object3D.<br>
 * <br>
 * Note that, for now, only ASCII format is supported
 */
export declare class VTKFactory {
    /**
     * Creates objects 3D from the given JSON (generated by parsing a VTK dataset).<br>
     * <br>
     * Note, that this factory will automatically apply a recenter and a rotation (to apply Z = UP paradigm) on the given vertices.<br>
     *
     * @param json The input json object
     * @param options The options to use to customize resulting objects
     */
    create(json: VTKFactory.Data, options: VTKFactory.Options): Object3D[];
    /**
     * Creates a mesh from the given JSON (generated by parsing a VTK dataset).
     * @param json The input json object
     * @param options The options to use to customize resulting objects
     * @returns m The mesh
     */
    createMesh(json: VTKFactory.MeshData, options: VTKFactory.MeshOptions): Mesh;
    /**
     * Creates lines from the given JSON (generated by parsing a VTK dataset).
     * @param json The input json object
     * @param options The options to use to customize resulting objects
     * @returns l The line
     */
    createLines(json: VTKFactory.LinesData, options: VTKFactory.LinesOptions): Line[];
    /**
     * Creates a pointcloud from the given JSON (generated by parsing a VTK dataset).<br>
     * <br>
     * One can choose what attribute will be used for point size and point color based on their names.<br>
     * Note that only 'scalar' attributes and FieldData with a stride of 1 can be used.<br>
     *
     * @param json The input json object
     * @param options The options to use to customize resulting objects
     * @returns p The pointcloud
     */
    createPointcloud(json: VTKFactory.PointcloudData, options: VTKFactory.PointcloudOptions): PointCloud;
    static getClassName(): string;
    getClassName(): string;
}
export declare namespace VTKFactory {
    /**
     * The input json object
     */
    export type Data = {
        /**
         * The metadata of the VTK
         */
        metadata: {
            /**
             * The header/comment at the top of the file
             */
            header: string;
            /**
             * The title/name of the dataset
             */
            title: string;
            /**
             * The type of the dataset (ASCII)
             */
            type: string;
            /**
             * Information related to the nature of the dataset
             */
            dataset: {
                /**
                 * The dataset type (UNSTRUCTURED_GRID, etc)
                 */
                type: string;
                /**
                 * The dimensions (specified only for some dataset types)
                 */
                dimensions?: number[];
                /**
                 * The point count in the dataset
                 */
                points?: number;
                origin?: number[];
                spacing?: number[];
            };
        };
        /**
         * The actual data
         */
        data: {
            /**
             * The vertices (XYZ)
             */
            position?: number[];
            /**
             * The indices for meshes (if any)
             */
            index?: number[];
            /**
             * The indices for lines (if any)
             */
            lineindex?: number[][];
            /**
             * The indices for pointset/pointcloud (if any)
             */
            pointindex?: number[];
            /**
             * The cells information, this is an intermediate representation, might not be necessary to create 3D objects
             */
            cells?: number[][];
            polylineindex?: number[];
        } & FieldData;
    };
    /**
     * The options to use to customize resulting objects
     */
    export type Options = MeshOptions & LinesOptions & PointcloudData;
    /**
     * The input json object
     */
    export type MeshData = {
        /**
         * The actual data
         */
        data: {
            /**
             * The vertices (XYZ)
             */
            position?: number[];
            /**
             * The indices for meshes (if any)
             */
            index?: number[];
        } & FieldData;
    };
    /**
     * The options to use to customize resulting objects
     */
    export type MeshOptions = OptionsBase & {
        /**
         * The options to use to customize resulting mesh
         */
        mesh?: {
            /**
             * The material to customize resulting mesh
             */
            material?: Material;
            /**
             * The mesh position
             */
            position?: Vector3;
            /**
             * The mesh scale
             */
            scale?: Vector3;
            zup?: boolean;
        };
    };
    /**
     * The input json object
     */
    export type LinesData = {
        /**
         * The actual data
         */
        data: {
            /**
             * The vertices (XYZ)
             */
            position?: number[];
            /**
             * The indices for lines (if any)
             */
            lineindex?: number[][];
        };
    };
    /**
     * The options to use to customize resulting objects
     */
    export type LinesOptions = OptionsBase & {
        /**
         * The options to use to customize resulting line
         */
        line?: {
            /**
             * The material to customize resulting line
             */
            material?: Material;
            /**
             * The line position
             */
            position?: Vector3;
            /**
             * The line scale
             */
            scale?: Vector3;
            zup?: boolean;
        };
    };
    /**
     * The input json object
     */
    export type PointcloudData = {
        /**
         * The actual data
         */
        data: {
            /**
             * The vertices (XYZ)
             */
            position?: number[];
            /**
             * The indices for pointset/pointcloud (if any)
             */
            pointindex?: number[];
        } & FieldData;
    };
    /**
     * The options to use to customize resulting objects
     */
    export type PointcloudOptions = OptionsBase & {
        /**
         * The options to use to customize resulting pointcloud
         */
        pointcloud?: {
            /**
             * The names of the attribute to use.
             */
            attributes?: {
                /**
                 * The key for the size attribute
                 */
                sizes?: string;
                /**
                 * The key for the value attribute
                 */
                values?: string;
            };
            /**
             * A color provider or a single color in css format
             */
            colorprovider?: ColorProvider | string | Color;
            zup?: boolean;
            /**
             * The line position
             */
            position?: Vector3;
            /**
             * The line scale
             */
            scale?: Vector3;
        };
    };
    /**
     * The fielddata object if any is present
     */
    type FieldData = Record<string, {
        /**
         * The fielddata name
         */
        name: string;
        /**
         * The fielddata type
         */
        type: string;
        /**
         * The fielddata content
         */
        arrays?: {
            /**
             * The name of this fielddata
             */
            name: string;
            /**
             * The stride of this fielddata
             */
            stride: number;
            /**
             * The values of this fielddata
             */
            values: number[];
        }[];
        values?: number[];
    }>;
    type OptionsBase = {
        /**
         * scale for every resulting object
         */
        scale?: Vector3;
    };
    export {};
}
